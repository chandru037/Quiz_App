// Questions array with question text, possible answers, and the index of the correct answer
const questions = [
    { question: "1. What is HTML?", answers: ["Hyper Text Markup Language", "Hot Mail", "How to Make Lasagna"], correct: 0 },
    { question: "2. What is CSS?", answers: ["Cascading Style Sheets", "Creative Style System", "Computer Style Sheets"], correct: 0 },
    { question: "3. The part of machine level instruction, which tells the central processor what has to be done, is", answers: ["Operation code", "Address", "None of the above"], correct: 0 },
    { question: "4. Which of the following refers to the associative memory?", answers: ["the address of the data is generated by the CPU", "the address of the data is supplied by the users", "there is no need for an address i.e. the data is used as an address"], correct: 2 },
    { question: "5. To avoid the race condition, the number of processes that may be simultaneously inside their critical section is", answers: ["8", "1", "0"], correct: 1 },
    { question: "6. What command is used to count the total number of lines, words, and characters contained in a file?", answers: ["countw", "wc", "wcount"], correct: 1 },
    { question: "7. What command is used to remove files?", answers: ["dm", "delete", "rm"], correct: 2 },
    { question: "8. What command is used with vi editor to delete a single character?", answers: ["x", "y", "z"], correct: 0 },
    { question: "9. A report generator is used to", answers: ["print files on paper", "data entry", "update files"], correct: 0 },
    { question: "10. Primitive operations common to all record management systems include", answers: ["Print", "Sort", "Look-up"], correct: 2 }
];


// Initial state variables
let currentQuestionIndex = 0;
let score = 0;
let time = 60; // Time per question
let totalTime = 600; // Total time for the quiz (10 minutes)
let timer;
let totalTimer;
let attempted = 0;
let skipped = 0;
let wrong = 0;
let selectedAnswer = null;
let hasAnswered = false;

// DOM elements
const questionContainer = document.getElementById('question-container');
const questionElement = document.getElementById('question');
const answersElement = document.getElementById('answers');
const questionTimeElement = document.getElementById('question-time');
const totalTimeElement = document.getElementById('total-time');
const nextButton = document.getElementById('next-btn');
const previousButton = document.getElementById('prev-btn');
const submitButton = document.getElementById('submit-btn');
const noticeElement = document.getElementById('notice');

// Function to start the quiz
function startQuiz() {
    showQuestion();
    timer = setInterval(countdown, 1000); // Timer for question time
    totalTimer = setInterval(totalCountdown, 1000); // Total quiz timer
}

// Function to display the current question and options
function showQuestion() {
    resetState();
    const currentQuestion = questions[currentQuestionIndex];
    questionElement.innerText = currentQuestion.question;

    // Create buttons for multiple choice answers
    currentQuestion.answers.forEach((answer, index) => {
        const button = document.createElement('button');
        button.innerText = answer;
        button.classList.add('cta-button');
        button.addEventListener('click', () => selectAnswer(index, button));
        answersElement.appendChild(button);
    });

    updateNavigationButtons();
}

// Function to reset state before showing a new question
function resetState() {
    selectedAnswer = null;
    hasAnswered = false;
    answersElement.innerHTML = ''; // Clear previous answers
    nextButton.classList.add('hide');
    previousButton.classList.add('hide');
    questionTimeElement.innerText = time; // Reset question timer
}

// Function to select an answer and highlight it
function selectAnswer(index, button) {
    if (hasAnswered) return; // Prevent changing answer
    selectedAnswer = index;
    hasAnswered = true;
    // Remove active class from all buttons
    Array.from(answersElement.children).forEach(btn => btn.classList.remove('active'));
    // Add active class to the selected button
    button.classList.add('active');
    if (currentQuestionIndex < questions.length - 1) {
        nextButton.classList.remove('hide');
    }
}

// Function to handle proceeding to the next question
function nextQuestion() {
    if (!hasAnswered) {
        skipped++;
    } else {
        attempted++;
        const isCorrect = selectedAnswer === questions[currentQuestionIndex].correct;
        if (isCorrect) {
            score++;
        } else {
            wrong++;
        }
    }
    if (currentQuestionIndex < questions.length - 1) {
        currentQuestionIndex++;
        time = 60; // Reset question time
        showQuestion();
    } else {
        finishQuiz();
    }
}

// Function to handle going back to the previous question
function previousQuestion() {
    if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        time = 60; // Reset question time
        showQuestion();
    }
}

// Countdown timer function for each question
function countdown() {
    if (time > 0) {
        time--;
        questionTimeElement.innerText = time;
    } else {
        skipped++;
        nextQuestion();
    }
}

// Countdown timer function for total quiz time
function totalCountdown() {
    if (totalTime > 0) {
        totalTime--;
        const minutes = Math.floor(totalTime / 60);
        const seconds = totalTime % 60;
        totalTimeElement.innerText = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
    } else {
        finishQuiz();
    }
}

// Function to finalize the quiz and store results
function finishQuiz() {
    clearInterval(timer);
    clearInterval(totalTimer);
    localStorage.setItem('quizScore', score);
    localStorage.setItem('attempted', attempted);
    localStorage.setItem('skipped', skipped);
    localStorage.setItem('wrong', wrong);
    window.location.href = 'report.html';
}

// Function to update the visibility of navigation buttons
function updateNavigationButtons() {
    previousButton.classList.toggle('hide', currentQuestionIndex === 0);
    nextButton.classList.toggle('hide', currentQuestionIndex === questions.length - 1);
    submitButton.classList.toggle('hide', currentQuestionIndex !== questions.length - 1);
}

// Event listeners for navigation buttons
nextButton.addEventListener('click', nextQuestion);
previousButton.addEventListener('click', previousQuestion);
submitButton.addEventListener('click', finishQuiz);

// Start the quiz
startQuiz();